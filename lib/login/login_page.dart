import 'package:b_net/login/registration_page.dart';
import 'package:flutter/gestures.dart';
import 'package:flutter/material.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:purchases_flutter/purchases_flutter.dart';
import '../home_page.dart';
import 'package:cloud_firestore/cloud_firestore.dart';

class LoginPage extends StatefulWidget {
  const LoginPage({super.key});

  @override
  _LoginPageState createState() => _LoginPageState();
}

class _LoginPageState extends State<LoginPage> {
  final TextEditingController _emailController = TextEditingController();
  final TextEditingController _passwordController = TextEditingController();
  final FirebaseAuth _auth = FirebaseAuth.instance;

  bool _obscureText = true; // „Éë„Çπ„ÉØ„Éº„ÉâË°®Á§∫ÈùûË°®Á§∫„ÅÆ„Éï„É©„Ç∞

  @override
  void dispose() {
    _emailController.dispose();
    _passwordController.dispose();
    super.dispose();
  }

  Future<void> _login() async {
    try {
      UserCredential userCredential = await _auth.signInWithEmailAndPassword(
        email: _emailController.text.trim(),
        password: _passwordController.text.trim(),
      );

      final user = userCredential.user;

      if (user != null) {
        try {
          // üëª ÁèæÂú®„ÅÆ RevenueCat „É¶„Éº„Ç∂„Éº„ÇíÁ¢∫Ë™ç
          final purchaserInfo = await Purchases.getCustomerInfo();
          final currentAppUserID = purchaserInfo.originalAppUserId;

          if (currentAppUserID.contains('anonymous')) {
            print('üëª ÁèæÂú®„ÅØÂåøÂêç„É¶„Éº„Ç∂„Éº„Å™„ÅÆ„Åß logOut „Çπ„Ç≠„ÉÉ„Éó');
          } else {
            await Purchases.logOut();
            print('‚úÖ RevenueCat: logOut ÂÆå‰∫Ü');
          }
        } catch (e) {
          print('‚ö†Ô∏è RevenueCat logOut „Ç®„É©„ÉºÔºàÁÑ°Ë¶ñ„Åó„Å¶OKÔºâ: $e');
        }

        // ‚úÖ Firebase UID „Åß RevenueCat „Å´„É≠„Ç∞„Ç§„É≥
        await Purchases.logIn(user.uid);
        print('‚úÖ RevenueCat: logIn ÂÆå‰∫Ü (${user.uid})');
      }

      // ‚úÖ ÁîªÈù¢ÈÅ∑Áßª
      if (mounted) {
        Navigator.of(context).pushReplacement(
          MaterialPageRoute(
            builder: (context) => FutureBuilder<DocumentSnapshot>(
              future: FirebaseFirestore.instance
                  .collection('users')
                  .doc(user!.uid)
                  .get(),
              builder: (context, snapshot) {
                if (snapshot.connectionState != ConnectionState.done) {
                  return const Scaffold(
                    body: Center(child: CircularProgressIndicator()),
                  );
                }
                if (!snapshot.hasData || !snapshot.data!.exists) {
                  return const Scaffold(
                    body: Center(child: Text('„É¶„Éº„Ç∂„Éº„Éá„Éº„Çø„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì')),
                  );
                }

                final data = snapshot.data!.data() as Map<String, dynamic>;
                final positions = List<String>.from(data['positions'] ?? []);
                final teams = List<String>.from(data['teams'] ?? []);
                final prefecture = data['prefecture'] ?? 'Êú™Ë®≠ÂÆö';

                return HomePage(
                  userUid: user.uid,
                  isTeamAccount: false,
                  accountId: user.uid,
                  accountName: user.displayName ?? 'ÂåøÂêç',
                  userPrefecture: prefecture,
                  userPosition: positions,
                  userTeamId: teams.isNotEmpty ? teams.first : null,
                );
              },
            ),
          ),
        );
      }
    } on FirebaseAuthException catch (e) {
      String errorMessage = '„É≠„Ç∞„Ç§„É≥„Å´Â§±Êïó„Åó„Åæ„Åó„Åü';

      if (e.code == 'wrong-password') {
        errorMessage = '„Éë„Çπ„ÉØ„Éº„Éâ„ÅåÈÅï„ÅÑ„Åæ„Åô';
      } else if (e.code == 'invalid-email') {
        errorMessage = '„É°„Éº„É´„Ç¢„Éâ„É¨„Çπ„ÅÆÂΩ¢Âºè„ÅåÈÅï„ÅÑ„Åæ„Åô';
      } else if (e.code == 'user-not-found') {
        errorMessage = '„Åì„ÅÆ„É°„Éº„É´„Ç¢„Éâ„É¨„Çπ„ÅØÁôªÈå≤„Åï„Çå„Å¶„ÅÑ„Åæ„Åõ„Çì';
      } else if (e.code == 'user-disabled') {
        errorMessage = '„Åì„ÅÆ„Ç¢„Ç´„Ç¶„É≥„Éà„ÅØÁÑ°Âäπ„Å´„Å™„Å£„Å¶„ÅÑ„Åæ„Åô';
      }

      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text(errorMessage)),
        );
      }
    } catch (e) {
      print('‚ùå ‰∫àÊúü„Åõ„Å¨„É≠„Ç∞„Ç§„É≥„Ç®„É©„Éº: $e');
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(content: Text('„É≠„Ç∞„Ç§„É≥„Å´Â§±Êïó„Åó„Åæ„Åó„Åü')),
        );
      }
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: SafeArea(
        child: SizedBox(
          width: double.infinity,
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            crossAxisAlignment: CrossAxisAlignment.center,
            children: [
              SizedBox(
                width: 300,
                child: TextField(
                  controller: _emailController,
                  decoration: const InputDecoration(
                    labelText: '„É°„Éº„É´„Ç¢„Éâ„É¨„Çπ',
                    border: OutlineInputBorder(),
                  ),
                ),
              ),
              const SizedBox(height: 20),
              SizedBox(
                width: 300,
                child: TextField(
                  controller: _passwordController,
                  obscureText: _obscureText,
                  decoration: InputDecoration(
                    labelText: '„Éë„Çπ„ÉØ„Éº„Éâw',
                    border: const OutlineInputBorder(),
                    suffixIcon: IconButton(
                      icon: Icon(
                        _obscureText
                            ? Icons.visibility_off
                            : Icons.visibility, // ‰øÆÊ≠£ÁÆáÊâÄ
                      ),
                      onPressed: () {
                        setState(() {
                          _obscureText = !_obscureText; // Ë°®Á§∫ÈùûË°®Á§∫„ÅÆÂàá„ÇäÊõø„Åà
                        });
                      },
                    ),
                  ),
                ),
              ),
              const SizedBox(height: 20),
              ElevatedButton(
                onPressed: _login,
                child: const Text('„É≠„Ç∞„Ç§„É≥'),
              ),
              const SizedBox(height: 15),
              RichText(
                text: TextSpan(
                  style: const TextStyle(color: Colors.black),
                  children: [
                    const TextSpan(text: '„Ç¢„Ç´„Ç¶„É≥„Éà„Çí‰ΩúÊàê„Åó„Å¶„ÅÑ„Å™„ÅÑÊñπ„ÅØ'),
                    TextSpan(
                      text: '„Åì„Å°„Çâ',
                      style: const TextStyle(color: Colors.blue),
                      recognizer: TapGestureRecognizer()
                        ..onTap = () {
                          Navigator.push(
                            context,
                            MaterialPageRoute(
                              builder: (context) => SignUpPage(),
                            ),
                          );
                        },
                    )
                  ],
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }
}
