import 'package:flutter/material.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:flutter_linkify/flutter_linkify.dart';
import 'package:url_launcher/url_launcher.dart';

class AddNoticePage extends StatefulWidget {
  const AddNoticePage({super.key});

  @override
  _AddNoticePageState createState() => _AddNoticePageState();
}

class _AddNoticePageState extends State<AddNoticePage> {
  final TextEditingController _titleController = TextEditingController();
  final TextEditingController _contentController = TextEditingController();
  bool _isImportant = false;
  List<String> _selectedPrefectures = [];

  final List<String> _prefectures = [
    'ÂåóÊµ∑ÈÅì',
    'ÈùíÊ£ÆÁúå',
    'Â≤©ÊâãÁúå',
    'ÂÆÆÂüéÁúå',
    'ÁßãÁî∞Áúå',
    'Â±±ÂΩ¢Áúå',
    'Á¶èÂ≥∂Áúå',
    'Ëå®ÂüéÁúå',
    'Ê†ÉÊú®Áúå',
    'Áæ§È¶¨Áúå',
    'ÂüºÁéâÁúå',
    'ÂçÉËëâÁúå',
    'Êù±‰∫¨ÈÉΩ',
    'Á•ûÂ•àÂ∑ùÁúå',
    'Êñ∞ÊΩüÁúå',
    'ÂØåÂ±±Áúå',
    'Áü≥Â∑ùÁúå',
    'Á¶è‰∫ïÁúå',
    'Â±±Ê¢®Áúå',
    'Èï∑ÈáéÁúå',
    'Â≤êÈòúÁúå',
    'ÈùôÂ≤°Áúå',
    'ÊÑõÁü•Áúå',
    '‰∏âÈáçÁúå',
    'ÊªãË≥ÄÁúå',
    '‰∫¨ÈÉΩÂ∫ú',
    'Â§ßÈò™Â∫ú',
    'ÂÖµÂ∫´Áúå',
    'Â•àËâØÁúå',
    'ÂíåÊ≠åÂ±±Áúå',
    'È≥•ÂèñÁúå',
    'Â≥∂Ê†πÁúå',
    'Â≤°Â±±Áúå',
    'Â∫ÉÂ≥∂Áúå',
    'Â±±Âè£Áúå',
    'Âæ≥Â≥∂Áúå',
    'È¶ôÂ∑ùÁúå',
    'ÊÑõÂ™õÁúå',
    'È´òÁü•Áúå',
    'Á¶èÂ≤°Áúå',
    '‰ΩêË≥ÄÁúå',
    'Èï∑Â¥éÁúå',
    'ÁÜäÊú¨Áúå',
    'Â§ßÂàÜÁúå',
    'ÂÆÆÂ¥éÁúå',
    'ÈπøÂÖêÂ≥∂Áúå',
    'Ê≤ñÁ∏ÑÁúå'
  ];

  /// **ÈÉΩÈÅìÂ∫úÁúåÈÅ∏Êäû„ÉÄ„Ç§„Ç¢„É≠„Ç∞**
  void _showPrefecturePicker() {
    showModalBottomSheet(
      context: context,
      isScrollControlled: true,
      builder: (context) {
        return StatefulBuilder(
          builder: (context, setModalState) {
            return Container(
              padding: const EdgeInsets.all(16.0),
              height: MediaQuery.of(context).size.height * 0.7,
              child: Column(
                children: [
                  const Text('ÈÉΩÈÅìÂ∫úÁúå„ÇíÈÅ∏Êäû',
                      style:
                          TextStyle(fontSize: 18, fontWeight: FontWeight.bold)),
                  Expanded(
                    child: ListView(
                      children: _prefectures.map((prefecture) {
                        return CheckboxListTile(
                          title: Text(prefecture),
                          value: _selectedPrefectures.contains(prefecture),
                          onChanged: (bool? value) {
                            setModalState(() {
                              if (value == true) {
                                _selectedPrefectures.add(prefecture);
                              } else {
                                _selectedPrefectures.remove(prefecture);
                              }
                            });
                            setState(() {});
                          },
                        );
                      }).toList(),
                    ),
                  ),
                  ElevatedButton(
                    onPressed: () => Navigator.pop(context),
                    child: const Text('Á¢∫ÂÆö'),
                  ),
                ],
              ),
            );
          },
        );
      },
    );
  }

  /// **Firestore„Å´‰øùÂ≠ò**
  Future<void> _saveNotice() async {
    await FirebaseFirestore.instance.collection('announcements').add({
      'title': _titleController.text,
      'content': _contentController.text,
      'isImportant': _isImportant,
      'prefectures': _selectedPrefectures,
      'timestamp': FieldValue.serverTimestamp(),
    });
    Navigator.pop(context);
  }

  /// **URL„Çí„Çø„ÉÉ„Éó„Åô„Çã„Å®Èñã„Åè**
  Future<void> _onOpenLink(LinkableElement link) async {
    if (await canLaunchUrl(Uri.parse(link.url))) {
      await launchUrl(Uri.parse(link.url),
          mode: LaunchMode.externalApplication);
    } else {
      debugPrint("„Ç∑„Éü„É•„É¨„Éº„Çø„Éº„Åß„ÅØÈñã„Åë„Åæ„Åõ„Çì: ${link.url}");
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: const Text('„ÅäÁü•„Çâ„Åõ„ÇíËøΩÂä†')),
      body: SingleChildScrollView(
        child: Padding(
          padding: const EdgeInsets.all(16.0),
          child: Column(
            children: [
              TextField(
                controller: _titleController,
                decoration: const InputDecoration(labelText: '„Çø„Ç§„Éà„É´'),
              ),
              const SizedBox(height: 10),
              Container(
                height: 300, // üìå ÂÜÖÂÆπ„Ç®„É™„Ç¢„ÇíÂ§ß„Åç„Åè„Åô„Çã
                child: TextField(
                  controller: _contentController,
                  maxLines: null, // üìå Ëá™Âãï„ÅßË°å„ÇíÂ¢ó„ÇÑ„Åô
                  expands: true, // üìå „Ç≥„É≥„ÉÜ„Éä„ÅÆ„Çµ„Ç§„Ç∫„Å´Âêà„Çè„Åõ„Çã
                  keyboardType: TextInputType.multiline,
                  decoration: const InputDecoration(
                    labelText: 'ÂÜÖÂÆπÔºàURL„ÅØËá™Âãï„É™„É≥„ÇØÔºâ',
                    border: OutlineInputBorder(),
                  ),
                ),
              ),
              const SizedBox(height: 10),
              CheckboxListTile(
                title: const Text('ÈáçË¶Å'),
                value: _isImportant,
                onChanged: (val) => setState(() => _isImportant = val ?? false),
              ),
              const SizedBox(height: 10),
              Center(
                child: ElevatedButton.icon(
                  onPressed: _showPrefecturePicker,
                  icon: const Icon(Icons.location_on),
                  label: const Text("ÈÉΩÈÅìÂ∫úÁúå„ÇíÈÅ∏Êäû"),
                ),
              ),
              const SizedBox(height: 10),
              Wrap(
                alignment: WrapAlignment.center,
                children: _selectedPrefectures
                    .map((pref) => Chip(label: Text(pref)))
                    .toList(),
              ),
              const SizedBox(height: 20),
              Center(
                child: ElevatedButton(
                  onPressed: _saveNotice,
                  child: const Text('‰øùÂ≠ò'),
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }
}
